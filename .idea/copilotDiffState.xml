<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="*.iml&#10;.gradle&#10;/local.properties&#10;/.idea/caches&#10;/.idea/libraries&#10;/.idea/modules.xml&#10;/.idea/workspace.xml&#10;/.idea/navEditor.xml&#10;/.idea/assetWizardSettings.xml&#10;.DS_Store&#10;/build&#10;/captures&#10;.externalNativeBuild&#10;.cxx&#10;local.properties&#10;" />
              <option name="updatedContent" value="# Archivos de Android Studio&#10;*.iml&#10;.gradle&#10;/local.properties&#10;/.idea/caches&#10;/.idea/libraries&#10;/.idea/modules.xml&#10;/.idea/workspace.xml&#10;/.idea/navEditor.xml&#10;/.idea/assetWizardSettings.xml&#10;/.idea/deploymentTargetDropDown.xml&#10;/.idea/gradle.xml&#10;/.idea/misc.xml&#10;/.idea/vcs.xml&#10;/.idea/shelf&#10;.DS_Store&#10;&#10;# Directorios de build&#10;/build&#10;/captures&#10;.externalNativeBuild&#10;.cxx&#10;/app/build/&#10;/app/release/&#10;&#10;# Archivos del usuario específicos&#10;local.properties&#10;keystore.properties&#10;*.jks&#10;*.keystore&#10;&#10;# Archivos con datos sensibles - NUNCA SUBIR&#10;*.json&#10;secrets.properties&#10;config.properties&#10;&#10;# Logs&#10;*.log&#10;&#10;# Archivos temporales&#10;*.tmp&#10;*.temp&#10;*~&#10;&#10;# Archivos de Android Lint&#10;lint-results.xml&#10;lint-results.html&#10;&#10;# Proguard&#10;proguard/&#10;&#10;# Archivos APK&#10;*.apk&#10;*.aab&#10;&#10;# Gradle Wrapper - mantener gradle-wrapper.properties pero no el jar&#10;!gradle/wrapper/gradle-wrapper.properties&#10;&#10;# NDK&#10;obj/&#10;&#10;# IntelliJ IDEA&#10;*.iws&#10;out/&#10;&#10;# Emulador&#10;.android/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# App de Consulta de Facturas Android&#10;&#10;Una aplicación Android para consultar facturas desde una API Laravel. Esta app permite autenticación, selección de empresas y visualización de facturas con paginación.&#10;&#10;##  Configuración Inicial&#10;&#10;### 1. Configurar la URL del Backend&#10;&#10;**IMPORTANTE**: Antes de usar la app, debes configurar la URL de tu backend local.&#10;&#10;Edita el archivo `app/src/main/res/values/config.xml`:&#10;&#10;```xml&#10;&lt;string name=&quot;api_base_url&quot;&gt;http://TU_IP_LOCAL:8000/api/&lt;/string&gt;&#10;```&#10;&#10;#### Opciones de configuración:&#10;&#10;- **Para emulador Android**: `http://10.0.2.2:8000/api/`&#10;- **Para dispositivo físico**: `http://TU_IP_LOCAL:8000/api/` (ej: `http://192.168.1.100:8000/api/`)&#10;- **Para producción**: `https://tu-dominio.com/api/`&#10;&#10;### 2. Encontrar tu IP local&#10;&#10;**Windows:**&#10;```cmd&#10;ipconfig&#10;```&#10;Busca &quot;Dirección IPv4&quot; en tu adaptador de red activo.&#10;&#10;**Mac/Linux:**&#10;```bash&#10;ifconfig | grep inet&#10;```&#10;&#10;### 3. Configurar el Backend Laravel&#10;&#10;Asegúrate de que tu servidor Laravel esté corriendo con:&#10;```bash&#10;php artisan serve --host=0.0.0.0 --port=8000&#10;```&#10;&#10;##  Funcionalidades&#10;&#10;- ✅ Login con autenticación JWT&#10;- ✅ Selección de empresas&#10;- ✅ Dashboard con botones de acción&#10;- ✅ Lista de facturas con paginación&#10;- ✅ Detalle de facturas&#10;- ✅ Filtros por estado de factura&#10;- ✅ Navegación intuitiva&#10;&#10;##  Arquitectura&#10;&#10;- **MVVM**: ViewModels para lógica de negocio&#10;- **Retrofit**: Cliente HTTP para API&#10;- **Coroutines**: Programación asíncrona&#10;- **RecyclerView**: Listas eficientes con paginación&#10;- **SharedPreferences**: Almacenamiento local seguro&#10;&#10;##  Seguridad&#10;&#10;- Tokens JWT para autenticación&#10;- URLs configurables (no hardcodeadas)&#10;- Logs de debug ocultables en producción&#10;- Datos sensibles excluidos del control de versiones&#10;&#10;##  Cómo ejecutar&#10;&#10;1. Clona el repositorio&#10;2. Abre el proyecto en Android Studio&#10;3. Configura la URL del backend en `config.xml`&#10;4. Asegúrate de que tu backend Laravel esté corriendo&#10;5. Ejecuta la app en emulador o dispositivo&#10;&#10;##  Endpoints utilizados&#10;&#10;La app consume estos endpoints del backend Laravel:&#10;&#10;```&#10;POST /api/mobile/login&#10;GET  /api/mobile/empresas&#10;POST /api/mobile/empresa/cambiar/{id}&#10;GET  /api/mobile/facturas/ventas&#10;GET  /api/mobile/facturas/ventas/{id}&#10;```&#10;&#10;##  Requisitos&#10;&#10;- Android Studio 4.0+&#10;- Android SDK 24+&#10;- Kotlin 1.8+&#10;- Backend Laravel con API configurada&#10;&#10;##  Solución de problemas&#10;&#10;### Error de red&#10;- Verifica que la URL en `config.xml` sea correcta&#10;- Confirma que el backend esté corriendo&#10;- En emulador, usa `10.0.2.2` en lugar de `localhost`&#10;&#10;### Error 401&#10;- Verifica las credenciales de login&#10;- Confirma que el backend tenga configuración CORS&#10;&#10;### La app se cierra&#10;- Revisa los logs en Android Studio (Logcat)&#10;- Verifica que todos los permisos estén configurados&#10;&#10;##  Licencia&#10;&#10;Este proyecto es para fines educativos y de desarrollo." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SECURITY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SECURITY.md" />
              <option name="updatedContent" value="# Configuración de Seguridad - IMPORTANTE&#10;&#10;## ⚠️ ANTES DE SUBIR A GITHUB&#10;&#10;### 1. Archivos que NUNCA debes subir:&#10;- `local.properties` - Contiene rutas específicas de tu máquina&#10;- `*.json` - Archivos con datos de prueba (pueden contener RUTs, emails, etc.)&#10;- `keystore.properties` - Configuración de certificados&#10;- `*.jks`, `*.keystore` - Certificados de firma&#10;&#10;### 2. Datos sensibles encontrados en tu proyecto:&#10;- ❌ IP privada hardcodeada: `192.168.32.1`&#10;- ❌ Archivos JSON con datos reales de empresas y facturas&#10;- ❌ Logs que muestran tokens completos&#10;&#10;### 3. ✅ Soluciones implementadas:&#10;- Configuración de URLs desde recursos XML&#10;- Logs de tokens censurados (solo muestran últimos 8 caracteres)&#10;- `.gitignore` mejorado para Android&#10;- Documentación para configuración local&#10;&#10;##  Configuración para diferentes entornos&#10;&#10;### config.xml para DESARROLLO LOCAL:&#10;```xml&#10;&lt;string name=&quot;api_base_url&quot;&gt;http://10.0.2.2:8000/api/&lt;/string&gt;&#10;&lt;bool name=&quot;debug_mode&quot;&gt;true&lt;/bool&gt;&#10;&lt;bool name=&quot;enable_http_logs&quot;&gt;true&lt;/bool&gt;&#10;```&#10;&#10;### config.xml para DISPOSITIVO FÍSICO:&#10;```xml&#10;&lt;string name=&quot;api_base_url&quot;&gt;http://192.168.1.XXX:8000/api/&lt;/string&gt;&#10;&lt;bool name=&quot;debug_mode&quot;&gt;true&lt;/bool&gt;&#10;&lt;bool name=&quot;enable_http_logs&quot;&gt;true&lt;/bool&gt;&#10;```&#10;&#10;### config.xml para PRODUCCIÓN:&#10;```xml&#10;&lt;string name=&quot;api_base_url&quot;&gt;https://tu-dominio.com/api/&lt;/string&gt;&#10;&lt;bool name=&quot;debug_mode&quot;&gt;false&lt;/bool&gt;&#10;&lt;bool name=&quot;enable_http_logs&quot;&gt;false&lt;/bool&gt;&#10;```&#10;&#10;##  Checklist antes de subir a GitHub:&#10;&#10;- [ ] Eliminar archivos *.json del directorio del proyecto&#10;- [ ] Configurar URL genérica en config.xml&#10;- [ ] Verificar que local.properties esté en .gitignore&#10;- [ ] Remover logs con datos sensibles&#10;- [ ] Actualizar README con instrucciones&#10;&#10;##  Comandos para limpiar el proyecto:&#10;&#10;```bash&#10;# Eliminar archivos con datos sensibles&#10;rm *.json&#10;rm app/*.json&#10;&#10;# Verificar qué archivos se subirán&#10;git status&#10;&#10;# Agregar solo archivos seguros&#10;git add .&#10;git commit -m &quot;Initial commit - clean version&quot;&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/test/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/test/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.test&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Observer&#10;import com.example.test.viewmodel.LoginViewModel&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private val loginViewModel: LoginViewModel by viewModels()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        val usernameEditText = findViewById&lt;EditText&gt;(R.id.editTextUsername)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#10;&#10;        // Función para realizar el login&#10;        val performLogin = {&#10;            val username = usernameEditText.text.toString().trim()&#10;            val password = passwordEditText.text.toString().trim()&#10;&#10;            if (username.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                loginViewModel.login(username, password)&#10;            } else {&#10;                Toast.makeText(this, &quot;Por favor ingrese email y contraseña&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        // Escucha del botón Enter en el campo de contraseña&#10;        passwordEditText.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE ||&#10;                actionId == android.view.inputmethod.EditorInfo.IME_ACTION_GO) {&#10;                performLogin()&#10;                true&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        // También escuchar Enter en el campo de usuario&#10;        usernameEditText.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_NEXT ||&#10;                actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                passwordEditText.requestFocus()&#10;                true&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        // Observar el estado del login&#10;        loginViewModel.loginResult.observe(this) { success -&gt;&#10;            if (success) {&#10;                Log.d(&quot;LoginActivity&quot;, &quot;Login exitoso. Navegando al selector de empresas...&quot;)&#10;                val intent = Intent(this, EmpresaSelectorActivity::class.java)&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;        }&#10;&#10;        loginViewModel.loading.observe(this, Observer { isLoading -&gt;&#10;            loginButton.isEnabled = !isLoading&#10;            loginButton.text = if (isLoading) &quot;Iniciando sesión...&quot; else &quot;Iniciar Sesión&quot;&#10;        })&#10;&#10;        loginViewModel.error.observe(this, Observer { error -&gt;&#10;            error?.let {&#10;                Toast.makeText(this, it, Toast.LENGTH_LONG).show()&#10;                loginViewModel.clearError()&#10;            }&#10;        })&#10;&#10;        loginButton.setOnClickListener {&#10;            performLogin()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.test&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.util.Log&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.EditText&#13;&#10;import android.widget.Toast&#13;&#10;import androidx.activity.viewModels&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import androidx.lifecycle.Observer&#13;&#10;import com.example.test.viewmodel.LoginViewModel&#13;&#10;import com.example.test.network.ApiClient&#13;&#10;&#13;&#10;class LoginActivity : AppCompatActivity() {&#13;&#10;&#13;&#10;    private val loginViewModel: LoginViewModel by viewModels()&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContentView(R.layout.activity_login)&#13;&#10;&#13;&#10;        // Inicializar ApiClient con configuración segura&#13;&#10;        ApiClient.initialize(this)&#13;&#10;&#13;&#10;        val usernameEditText = findViewById&lt;EditText&gt;(R.id.editTextUsername)&#13;&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#13;&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#13;&#10;&#13;&#10;        // Función para realizar el login&#13;&#10;        val performLogin = {&#13;&#10;            val username = usernameEditText.text.toString().trim()&#13;&#10;            val password = passwordEditText.text.toString().trim()&#13;&#10;&#13;&#10;            if (username.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#13;&#10;                loginViewModel.login(username, password)&#13;&#10;            } else {&#13;&#10;                Toast.makeText(this, &quot;Por favor ingrese email y contraseña&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Escucha del botón Enter en el campo de contraseña&#13;&#10;        passwordEditText.setOnEditorActionListener { _, actionId, _ -&gt;&#13;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE ||&#13;&#10;                actionId == android.view.inputmethod.EditorInfo.IME_ACTION_GO) {&#13;&#10;                performLogin()&#13;&#10;                true&#13;&#10;            } else {&#13;&#10;                false&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // También escuchar Enter en el campo de usuario&#13;&#10;        usernameEditText.setOnEditorActionListener { _, actionId, _ -&gt;&#13;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_NEXT ||&#13;&#10;                actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#13;&#10;                passwordEditText.requestFocus()&#13;&#10;                true&#13;&#10;            } else {&#13;&#10;                false&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Observar el estado del login&#13;&#10;        loginViewModel.loginResult.observe(this) { success -&gt;&#13;&#10;            if (success) {&#13;&#10;                Log.d(&quot;LoginActivity&quot;, &quot;Login exitoso. Navegando al selector de empresas...&quot;)&#13;&#10;                val intent = Intent(this, EmpresaSelectorActivity::class.java)&#13;&#10;                startActivity(intent)&#13;&#10;                finish()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        loginViewModel.loading.observe(this, Observer { isLoading -&gt;&#13;&#10;            loginButton.isEnabled = !isLoading&#13;&#10;            loginButton.text = if (isLoading) &quot;Iniciando sesión...&quot; else &quot;Iniciar Sesión&quot;&#13;&#10;        })&#13;&#10;&#13;&#10;        loginViewModel.error.observe(this, Observer { error -&gt;&#13;&#10;            error?.let {&#13;&#10;                Toast.makeText(this, it, Toast.LENGTH_LONG).show()&#13;&#10;                loginViewModel.clearError()&#13;&#10;            }&#13;&#10;        })&#13;&#10;&#13;&#10;        loginButton.setOnClickListener {&#13;&#10;            performLogin()&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/test/network/ApiClient.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/test/network/ApiClient.kt" />
              <option name="originalContent" value="package com.example.test.network&#10;&#10;import android.util.Log&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;&#10;object ApiClient {&#10;    private const val BASE_URL = &quot;http://192.168.32.1:8000/api/&quot;&#10;&#10;    private val loggingInterceptor = HttpLoggingInterceptor { message -&gt;&#10;        Log.d(&quot;HTTP_REQUEST&quot;, message)&#10;    }.apply {&#10;        level = HttpLoggingInterceptor.Level.BODY&#10;    }&#10;&#10;    private val okHttpClient = OkHttpClient.Builder()&#10;        .addInterceptor { chain -&gt;&#10;            val request = chain.request()&#10;            val empresaId = request.header(&quot;X-Empresa-ID&quot;)&#10;            Log.d(&quot;ApiClient&quot;, &quot;=== ENVIANDO REQUEST ===&quot;)&#10;            Log.d(&quot;ApiClient&quot;, &quot;URL: ${request.url}&quot;)&#10;            Log.d(&quot;ApiClient&quot;, &quot;Method: ${request.method}&quot;)&#10;            Log.d(&quot;ApiClient&quot;, &quot;X-Empresa-ID Header: $empresaId&quot;)&#10;            Log.d(&quot;ApiClient&quot;, &quot;Authorization Header: ${request.header(&quot;Authorization&quot;)?.take(20)}...&quot;)&#10;&#10;            val response = chain.proceed(request)&#10;            Log.d(&quot;ApiClient&quot;, &quot;Response Code: ${response.code}&quot;)&#10;            response&#10;        }&#10;        .addInterceptor(loggingInterceptor)&#10;        .connectTimeout(30, TimeUnit.SECONDS)&#10;        .readTimeout(30, TimeUnit.SECONDS)&#10;        .writeTimeout(30, TimeUnit.SECONDS)&#10;        .build()&#10;&#10;    private val retrofit = Retrofit.Builder()&#10;        .baseUrl(BASE_URL)&#10;        .client(okHttpClient)&#10;        .addConverterFactory(GsonConverterFactory.create())&#10;        .build()&#10;&#10;    val apiService: ApiService = retrofit.create(ApiService::class.java)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.test.network&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.util.Log&#13;&#10;import okhttp3.OkHttpClient&#13;&#10;import okhttp3.logging.HttpLoggingInterceptor&#13;&#10;import retrofit2.Retrofit&#13;&#10;import retrofit2.converter.gson.GsonConverterFactory&#13;&#10;import java.util.concurrent.TimeUnit&#13;&#10;import com.example.test.R&#13;&#10;&#13;&#10;object ApiClient {&#13;&#10;    private var baseUrl: String? = null&#13;&#10;    private var enableLogs: Boolean = false&#13;&#10;    &#13;&#10;    fun initialize(context: Context) {&#13;&#10;        baseUrl = context.getString(R.string.api_base_url)&#13;&#10;        enableLogs = context.resources.getBoolean(R.bool.enable_http_logs)&#13;&#10;    }&#13;&#10;&#13;&#10;    private val loggingInterceptor = HttpLoggingInterceptor { message -&gt;&#13;&#10;        if (enableLogs) {&#13;&#10;            Log.d(&quot;HTTP_REQUEST&quot;, message)&#13;&#10;        }&#13;&#10;    }.apply {&#13;&#10;        level = if (enableLogs) HttpLoggingInterceptor.Level.BODY else HttpLoggingInterceptor.Level.NONE&#13;&#10;    }&#13;&#10;&#13;&#10;    private val okHttpClient = OkHttpClient.Builder()&#13;&#10;        .addInterceptor { chain -&gt;&#13;&#10;            val request = chain.request()&#13;&#10;            &#13;&#10;            if (enableLogs) {&#13;&#10;                val empresaId = request.header(&quot;X-Empresa-ID&quot;)&#13;&#10;                Log.d(&quot;ApiClient&quot;, &quot;=== ENVIANDO REQUEST ===&quot;)&#13;&#10;                Log.d(&quot;ApiClient&quot;, &quot;URL: ${request.url}&quot;)&#13;&#10;                Log.d(&quot;ApiClient&quot;, &quot;Method: ${request.method}&quot;)&#13;&#10;                Log.d(&quot;ApiClient&quot;, &quot;X-Empresa-ID Header: $empresaId&quot;)&#13;&#10;                // No mostrar el token completo por seguridad&#13;&#10;                val authHeader = request.header(&quot;Authorization&quot;)&#13;&#10;                if (authHeader != null) {&#13;&#10;                    Log.d(&quot;ApiClient&quot;, &quot;Authorization Header: Bearer ***${authHeader.takeLast(8)}&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            val response = chain.proceed(request)&#13;&#10;            &#13;&#10;            if (enableLogs) {&#13;&#10;                Log.d(&quot;ApiClient&quot;, &quot;Response Code: ${response.code}&quot;)&#13;&#10;            }&#13;&#10;            &#13;&#10;            response&#13;&#10;        }&#13;&#10;        .addInterceptor(loggingInterceptor)&#13;&#10;        .connectTimeout(30, TimeUnit.SECONDS)&#13;&#10;        .readTimeout(30, TimeUnit.SECONDS)&#13;&#10;        .writeTimeout(30, TimeUnit.SECONDS)&#13;&#10;        .build()&#13;&#10;&#13;&#10;    val retrofit: Retrofit by lazy {&#13;&#10;        if (baseUrl == null) {&#13;&#10;            throw IllegalStateException(&quot;ApiClient no ha sido inicializado. Llama a ApiClient.initialize(context) primero.&quot;)&#13;&#10;        }&#13;&#10;        &#13;&#10;        Retrofit.Builder()&#13;&#10;            .baseUrl(baseUrl!!)&#13;&#10;            .client(okHttpClient)&#13;&#10;            .addConverterFactory(GsonConverterFactory.create())&#13;&#10;            .build()&#13;&#10;    }&#13;&#10;&#13;&#10;    val apiService: ApiService by lazy {&#13;&#10;        retrofit.create(ApiService::class.java)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/config.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/config.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Configuración de desarrollo - cambiar para producción --&gt;&#10;    &lt;!-- Para desarrollo local, cambia la IP por la tuya --&gt;&#10;    &lt;string name=&quot;api_base_url&quot;&gt;http://10.0.2.2:8000/api/&lt;/string&gt;&#10;    &lt;string name=&quot;api_base_url_emulator&quot;&gt;http://10.0.2.2:8000/api/&lt;/string&gt;&#10;    &#10;    &lt;!-- Para dispositivo físico en la misma red --&gt;&#10;    &lt;!-- &lt;string name=&quot;api_base_url&quot;&gt;http://TU_IP_LOCAL:8000/api/&lt;/string&gt; --&gt;&#10;    &#10;    &lt;!-- Para producción --&gt;&#10;    &lt;!-- &lt;string name=&quot;api_base_url&quot;&gt;https://tu-dominio.com/api/&lt;/string&gt; --&gt;&#10;    &#10;    &lt;!-- Configuración de debug --&gt;&#10;    &lt;bool name=&quot;debug_mode&quot;&gt;true&lt;/bool&gt;&#10;    &lt;bool name=&quot;enable_http_logs&quot;&gt;true&lt;/bool&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>